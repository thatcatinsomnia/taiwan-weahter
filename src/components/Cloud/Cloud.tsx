/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 public/cloud.glb -t -p6 -k -r
*/

import { useRef } from 'react';
import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    cloud: THREE.Mesh;
  };
  materials: {
    sky: THREE.MeshStandardMaterial;
  };
};

export type Props = JSX.IntrinsicElements['group'] & {
  weather?: 'rain' | 'sun' | 'cloud';
  wireframe?: boolean;
  x?: number;
  y?: number;
  z?: number;
  dark?: boolean;
};

export default function Cloud({ weather, x = 0, y = 0, z = 0, scale = 0.06, dark = false, ...props }: Props) {
  const { nodes, materials } = useGLTF('/cloud.glb') as unknown as GLTFResult;
  const cloudRef = useRef<THREE.Group>(null);
  const darkMaterial = materials.sky.clone();
  darkMaterial.color.set('#a4a8ac');
  
  return (
    <group
      {...props}
      ref={cloudRef}
      name="cloud"
      scale={scale}
      position-x={x}
      position-y={y}
      position-z={z}
      rotation-x={Math.PI / 2}
    >
      <mesh
        geometry={nodes.cloud.geometry}
        material={dark ? darkMaterial :  materials.sky}
      />
    </group>
  );
}

useGLTF.preload('/cloud.glb');
